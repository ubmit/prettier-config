"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOptions = exports.options = exports.printers = exports.parsers = exports.languages = exports.pluginMarker = void 0;
const common_1 = require("@augment-vir/common");
const prettier_1 = require("prettier");
const parser_babel_1 = require("prettier/parser-babel");
const parser_typescript_1 = require("prettier/parser-typescript");
const options_1 = require("./options");
const preprocessing_1 = require("./preprocessing");
const multiline_array_printer_1 = require("./printer/multiline-array-printer");
// exports in case others want to utilize these
__exportStar(require("./options"), exports);
var plugin_marker_1 = require("./plugin-marker");
Object.defineProperty(exports, "pluginMarker", { enumerable: true, get: function () { return plugin_marker_1.pluginMarker; } });
exports.languages = (0, prettier_1.getSupportInfo)().languages.filter(({ name }) => [
    'JavaScript',
    'TypeScript',
    'JSON',
    'JSON5',
    'JSON with Comments',
    'JSON.stringify',
].includes(name));
exports.parsers = Object.entries({
    typescript: parser_typescript_1.parsers.typescript,
    babel: parser_babel_1.parsers.babel,
    'babel-ts': parser_babel_1.parsers['babel-ts'],
    json: parser_babel_1.parsers.json,
    json5: parser_babel_1.parsers.json5,
}).reduce((accum, [key, entry,]) => {
    accum[key] = (0, preprocessing_1.addCustomPreprocessing)(entry, key);
    return accum;
}, {});
exports.printers = {
    estree: multiline_array_printer_1.multilineArrayPrinter,
    'estree-json': multiline_array_printer_1.multilineArrayPrinter,
};
exports.options = (0, common_1.getObjectTypedKeys)(options_1.defaultMultilineArrayOptions).reduce((accum, key) => {
    const defaultValue = options_1.defaultMultilineArrayOptions[key];
    const supportOption = {
        name: key,
        type: typeof defaultValue === 'number'
            ? 'int'
            : // prettier's types are wrong here, 'string' is expected
                typeof defaultValue,
        category: 'multilineArray',
        since: '0.0.1',
        default: Array.isArray(defaultValue) ? defaultValue.join(' ') : defaultValue,
        description: options_1.optionHelp[key],
    };
    accum[key] = supportOption;
    return accum;
}, {});
exports.defaultOptions = options_1.defaultMultilineArrayOptions;
/** Not actually exported. Just for type checking purposes. */
const plugin = {
    options: exports.options,
    printers: exports.printers,
    defaultOptions: exports.defaultOptions,
    parsers: exports.parsers,
    languages: exports.languages,
};
