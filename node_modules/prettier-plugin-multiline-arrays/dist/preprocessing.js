"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCustomPreprocessing = void 0;
const plugin_marker_1 = require("./plugin-marker");
const multiline_array_printer_1 = require("./printer/multiline-array-printer");
const original_printer_1 = require("./printer/original-printer");
function addMultilinePrinter(options) {
    if ('printer' in options) {
        (0, original_printer_1.setOriginalPrinter)(options.printer);
        // overwrite the printer with ours
        options.printer = multiline_array_printer_1.multilineArrayPrinter;
    }
    else {
        const astFormat = options.astFormat;
        if (!astFormat) {
            throw new Error(`Could not find astFormat while adding printer.`);
        }
        /**
         * If the printer hasn't already been assigned in options, rearrange plugins so that ours
         * gets chosen.
         */
        const plugins = options.plugins;
        const firstMatchedPlugin = plugins.find((plugin) => typeof plugin !== 'string' && !!plugin.printers && !!plugin.printers[astFormat]);
        if (!firstMatchedPlugin || typeof firstMatchedPlugin === 'string') {
            throw new Error(`Matched invalid first plugin: ${firstMatchedPlugin}`);
        }
        const matchedPrinter = firstMatchedPlugin.printers?.[astFormat];
        if (!matchedPrinter) {
            throw new Error(`Printer not found on matched plugin: ${firstMatchedPlugin}`);
        }
        (0, original_printer_1.setOriginalPrinter)(matchedPrinter);
        const thisPluginIndex = plugins.findIndex((plugin) => {
            return plugin.pluginMarker === plugin_marker_1.pluginMarker;
        });
        const thisPlugin = plugins[thisPluginIndex];
        if (!thisPlugin) {
            throw new Error(`This plugin was not found.`);
        }
        // remove this plugin from its current location in the array
        plugins.splice(thisPluginIndex, 1);
        // add this plugin to the beginning of the array so its printer is found first
        plugins.splice(0, 0, thisPlugin);
    }
}
function findPluginsByParserName(parserName, options) {
    return options.plugins.filter((plugin) => {
        return (typeof plugin === 'object' &&
            plugin.pluginMarker !== plugin_marker_1.pluginMarker &&
            !!plugin.parsers?.[parserName]);
    });
}
function addCustomPreprocessing(originalParser, parserName) {
    const thisPluginPreprocess = (text, options) => {
        const pluginsWithPreprocessor = findPluginsByParserName(parserName, options).filter((plugin) => !!plugin.parsers?.[parserName]?.preprocess);
        let processedText = text;
        pluginsWithPreprocessor.forEach((pluginWithPreprocessor) => {
            const nextText = pluginWithPreprocessor.parsers?.[parserName]?.preprocess?.(processedText, {
                ...options,
                plugins: options.plugins.filter((plugin) => plugin.pluginMarker !== plugin_marker_1.pluginMarker),
            });
            if (nextText != undefined) {
                processedText = nextText;
            }
        });
        addMultilinePrinter(options);
        return processedText;
    };
    const parser = {
        ...originalParser,
        preprocess: thisPluginPreprocess,
    };
    return parser;
}
exports.addCustomPreprocessing = addCustomPreprocessing;
