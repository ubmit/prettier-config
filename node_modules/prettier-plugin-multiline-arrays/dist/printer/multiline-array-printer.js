"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.multilineArrayPrinter = void 0;
const options_1 = require("../options");
const insert_new_lines_1 = require("./insert-new-lines");
const original_printer_1 = require("./original-printer");
const debug = !!process.env[options_1.envDebugKey];
function wrapInOriginalPrinterCall(property, subProperty) {
    return (...args) => {
        const originalPrinter = (0, original_printer_1.getOriginalPrinter)();
        if (property === 'print') {
            const path = args[0];
            const options = args[1];
            const originalOutput = originalPrinter.print.call(originalPrinter, path, options, ...args.slice(2));
            if (options.filepath.endsWith('package.json') &&
                options.plugins.find((plugin) => typeof plugin === 'object' &&
                    plugin.name?.includes('prettier-plugin-packagejson'))) {
                return originalOutput;
            }
            const multilineOptions = (0, options_1.fillInOptions)(options);
            return (0, insert_new_lines_1.printWithMultilineArrays)(originalOutput, args[0], multilineOptions, debug);
        }
        else {
            let thisParent = originalPrinter;
            let printerProp = originalPrinter[property];
            if (subProperty) {
                thisParent = printerProp;
                printerProp = printerProp[subProperty];
            }
            try {
                return printerProp?.apply(thisParent, args);
            }
            catch (error) {
                const newError = new Error(`Failed to wrap JS printer call for property "${property}" ${subProperty ? `and subProperty "${subProperty}"` : ''}: \n`);
                if (error instanceof Error && error.stack) {
                    newError.stack = newError.message + error.stack;
                }
                throw newError;
            }
        }
    };
}
const handleComments = {
    // the avoidAstMutation property is not defined in the types
    // @ts-expect-error
    avoidAstMutation: true,
    endOfLine: wrapInOriginalPrinterCall('handleComments', 'endOfLine'),
    ownLine: wrapInOriginalPrinterCall('handleComments', 'ownLine'),
    remaining: wrapInOriginalPrinterCall('handleComments', 'remaining'),
};
/** This is a proxy because the original printer is only set at run time. */
exports.multilineArrayPrinter = new Proxy({}, {
    get: (target, property) => {
        /**
         * "handleComments" is the only printer property which isn't a callback function, so for
         * simplicity, ignore it.
         */
        if (property === 'handleComments') {
            return handleComments;
        }
        /**
         * We have to return a callback so that we can extract the jsPlugin from the options
         * argument
         */
        return wrapInOriginalPrinterCall(property);
    },
});
