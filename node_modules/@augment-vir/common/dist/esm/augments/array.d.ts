import { AtLeastTuple } from './tuple';
import { ArrayElement } from './type';
export declare function filterOutIndexes<T>(array: ReadonlyArray<T>, indexes: ReadonlyArray<number>): T[];
export declare function flatten2dArray<T>(array2d: ReadonlyArray<ReadonlyArray<T>>): T[];
export type AtLeastOneEntryArray<ArrayGeneric extends ReadonlyArray<any>> = AtLeastTuple<ArrayElement<ArrayGeneric>, 1>;
export declare function trimArrayStrings(input: ReadonlyArray<string>): string[];
export declare function typedArrayIncludes<T>(array: ReadonlyArray<T>, input: unknown): input is T;
type MapCallbackType<ArrayType extends ReadonlyArray<any>, OutputType> = (value: ArrayElement<ArrayType>, index: number, array: ArrayType) => OutputType;
/** Preserves tuple types. */
export declare function typedMap<InputArrayGeneric extends ReadonlyArray<any>, OutputType>(arrayToMap: InputArrayGeneric, mapCallback: MapCallbackType<InputArrayGeneric, OutputType>): {
    [Index in keyof InputArrayGeneric]: OutputType;
};
export {};
//# sourceMappingURL=array.d.ts.map