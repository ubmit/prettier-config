export declare const englishFullMonthNames: readonly ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
export declare const englishShortMonthNames: string[];
export declare class InvalidDateError extends Error {
    readonly name = "InvalidDateError";
}
/**
 * @param slashFormatString String that should be of format "MM/DD/YY", "MM/DD/YYYY". When the year
 *   portion only contains 2 numbers ("MM/DD/YY") the century must be provided in the form of the
 *   yearPrefix input.
 * @param yearPrefix String or number that is used to prefix slash format strings that only contain
 *   2 digits ("MM/DD/YY"). If the year is entirely missing form the given slash format string, the
 *   year will default to year 00 of the given century. See test file for examples.
 */
export declare function createDateFromSlashFormat(slashFormatString: string, yearPrefix?: number | string): Date;
/**
 * @param commaFormatString Should be at string of the form "monthName dayNumber, fullYear" Example:
 *   "May 19, 2005"
 * @param ignoreInvalidMonth Set to true to ignore invalid months and just use the current UTC month
 */
export declare function createDateFromNamedCommaFormat(commaFormatString: string, ignoreInvalidMonth?: boolean): Date;
/**
 * Converts an iso-formatted string to a UTC date object. The time is nulled out to all zeros.
 *
 * @param isoFormatString Should be a date in the format YYYY-MM-DD.
 */
export declare function createDateFromUtcIsoFormat(isoFormatString: string): Date;
//# sourceMappingURL=date.d.ts.map