"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureType = exports.wrapNarrowTypeWithTypeCheck = void 0;
/**
 * This function returns another function that simply returns whatever input it's given. However, it
 * also checks that the input matches the original wrapNarrowTypeWithTypeCheck's generic, while
 * maintaining strict "const" like typing.
 *
 * Use like this: wrapNarrowTypeWithTypeCheck<EnforcedTypeHere>()(valueToEnforceTypeOn as const)
 *
 * Sometimes "as const" isn't required, usually it is for any object or array though.
 */
function wrapNarrowTypeWithTypeCheck() {
    return (input) => {
        return input;
    };
}
exports.wrapNarrowTypeWithTypeCheck = wrapNarrowTypeWithTypeCheck;
/**
 * This is a type helper that ensures the given input matches the given generic type. The generic is
 * setup in such a way that if it is omitted (which is typically allowed in TypeScript, resulting in
 * the generic being inferred from the inputs), there will actually be a type error. This forces
 * each usage of this function to explicitly specify the generic, thus giving us type safety for the
 * input.
 */
function ensureType(input) {
    return input;
}
exports.ensureType = ensureType;
